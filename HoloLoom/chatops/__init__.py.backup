"""
HoloLoom ChatOps
================
Matrix.org chatbot integration with HoloLoom neural decision-making.

Components:
- MatrixBot: Async Matrix protocol client
- ChatOpsOrchestrator: Integration bridge to HoloLoom
- ConversationMemory: Knowledge graph storage for conversations
- ChatOpsSkills: Pre-built Promptly skills for common commands

Quick Start:
    >>> from holoLoom.chatops import ChatOpsRunner
    >>> import asyncio
    >>>
    >>> config = {
    ...     "matrix": {
    ...         "homeserver_url": "https://matrix.org",
    ...         "user_id": "@bot:matrix.org",
    ...         "access_token": "YOUR_TOKEN",
    ...         "rooms": ["#test:matrix.org"]
    ...     }
    ... }
    >>>
    >>> runner = ChatOpsRunner(config)
    >>> asyncio.run(runner.run())
"""

from holoLoom.chatops.matrix_bot import MatrixBot, MatrixBotConfig
from holoLoom.chatops.chatops_bridge import ChatOpsOrchestrator, ConversationContext
from holoLoom.chatops.conversation_memory import ConversationMemory, EntityType, RelationType
from holoLoom.chatops.chatops_skills import ChatOpsSkills, SkillResult, ChatOpsSkill
from holoLoom.chatops.run_chatops import ChatOpsRunner

# Optional handlers (may not be present in all setups)
try:
    from holoLoom.chatops.multimodal_handler import MultimodalHandler
    _MULTIMODAL_AVAILABLE = True
except ImportError:
    _MULTIMODAL_AVAILABLE = False

try:
    from holoLoom.chatops.thread_handler import ThreadHandler
    _THREAD_AVAILABLE = True
except ImportError:
    _THREAD_AVAILABLE = False

__all__ = [
    "MatrixBot",
    "MatrixBotConfig",
    "ChatOpsOrchestrator",
    "ConversationContext",
    "ConversationMemory",
    "EntityType",
    "RelationType",
    "ChatOpsSkills",
    "SkillResult",
    "ChatOpsSkill",
    "ChatOpsRunner",
]

if _MULTIMODAL_AVAILABLE:
    __all__.append("MultimodalHandler")

if _THREAD_AVAILABLE:
    __all__.append("ThreadHandler")

__version__ = "0.1.0"
